// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// R_interface.cpp
doubles_matrix<> R_ess_tmvn(int N, const doubles& mu, const doubles_matrix<>& L, const doubles& init);
extern "C" SEXP _seine_R_ess_tmvn(SEXP N, SEXP mu, SEXP L, SEXP init) {
  BEGIN_CPP11
    return cpp11::as_sexp(R_ess_tmvn(cpp11::as_cpp<cpp11::decay_t<int>>(N), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(mu), cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>&>>(L), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(init)));
  END_CPP11
}
// R_interface.cpp
list R_ep_moments(const doubles& mu, const doubles_matrix<>& L, const doubles& addl_c, double addl_shift, double tol);
extern "C" SEXP _seine_R_ep_moments(SEXP mu, SEXP L, SEXP addl_c, SEXP addl_shift, SEXP tol) {
  BEGIN_CPP11
    return cpp11::as_sexp(R_ep_moments(cpp11::as_cpp<cpp11::decay_t<const doubles&>>(mu), cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>&>>(L), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(addl_c), cpp11::as_cpp<cpp11::decay_t<double>>(addl_shift), cpp11::as_cpp<cpp11::decay_t<double>>(tol)));
  END_CPP11
}
// R_interface.cpp
doubles R_utn_moments(double mu, double sigma2);
extern "C" SEXP _seine_R_utn_moments(SEXP mu, SEXP sigma2) {
  BEGIN_CPP11
    return cpp11::as_sexp(R_utn_moments(cpp11::as_cpp<cpp11::decay_t<double>>(mu), cpp11::as_cpp<cpp11::decay_t<double>>(sigma2)));
  END_CPP11
}
// R_interface.cpp
double R_llik_intonly(const doubles& eta, const doubles_matrix<>& L, const doubles& y, const doubles_matrix<>& X, const doubles& weights, double tol);
extern "C" SEXP _seine_R_llik_intonly(SEXP eta, SEXP L, SEXP y, SEXP X, SEXP weights, SEXP tol) {
  BEGIN_CPP11
    return cpp11::as_sexp(R_llik_intonly(cpp11::as_cpp<cpp11::decay_t<const doubles&>>(eta), cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>&>>(L), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(y), cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>&>>(X), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(weights), cpp11::as_cpp<cpp11::decay_t<double>>(tol)));
  END_CPP11
}
// R_interface.cpp
doubles R_draw_local(int draws, const doubles& eta, const doubles_matrix<>& L, const doubles& y, const doubles_matrix<>& X, int warmup, double tol);
extern "C" SEXP _seine_R_draw_local(SEXP draws, SEXP eta, SEXP L, SEXP y, SEXP X, SEXP warmup, SEXP tol) {
  BEGIN_CPP11
    return cpp11::as_sexp(R_draw_local(cpp11::as_cpp<cpp11::decay_t<int>>(draws), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(eta), cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>&>>(L), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(y), cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>&>>(X), cpp11::as_cpp<cpp11::decay_t<int>>(warmup), cpp11::as_cpp<cpp11::decay_t<double>>(tol)));
  END_CPP11
}
// R_interface.cpp
doubles_matrix<> R_proj_mvn(const doubles& eta, const doubles_matrix<>& L, const doubles& x, double eps);
extern "C" SEXP _seine_R_proj_mvn(SEXP eta, SEXP L, SEXP x, SEXP eps) {
  BEGIN_CPP11
    return cpp11::as_sexp(R_proj_mvn(cpp11::as_cpp<cpp11::decay_t<const doubles&>>(eta), cpp11::as_cpp<cpp11::decay_t<const doubles_matrix<>&>>(L), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(x), cpp11::as_cpp<cpp11::decay_t<double>>(eps)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_seine_R_draw_local",   (DL_FUNC) &_seine_R_draw_local,   7},
    {"_seine_R_ep_moments",   (DL_FUNC) &_seine_R_ep_moments,   5},
    {"_seine_R_ess_tmvn",     (DL_FUNC) &_seine_R_ess_tmvn,     4},
    {"_seine_R_llik_intonly", (DL_FUNC) &_seine_R_llik_intonly, 6},
    {"_seine_R_proj_mvn",     (DL_FUNC) &_seine_R_proj_mvn,     4},
    {"_seine_R_utn_moments",  (DL_FUNC) &_seine_R_utn_moments,  2},
    {"run_testthat_tests",    (DL_FUNC) &run_testthat_tests,    1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_seine(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
