% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ei_est.R
\name{ei_est}
\alias{ei_est}
\alias{as.matrix.ei_est}
\alias{vcov.ei_est}
\alias{nobs.ei_est}
\title{Estimate ecological quantities}
\usage{
ei_est(
  regr = NULL,
  riesz = NULL,
  data,
  total,
  subset = NULL,
  contrast = NULL,
  outcome = NULL,
  conf_level = FALSE,
  use_student = TRUE
)

\method{as.matrix}{ei_est}(x, which = "estimate", ...)

\method{vcov}{ei_est}(object, ...)

\method{nobs}{ei_est}(object, ...)
}
\arguments{
\item{regr}{A fitted regression model, from \code{\link[=ei_ridge]{ei_ridge()}}, or another kind
of regression model wrapped with \code{\link[=ei_wrap_model]{ei_wrap_model()}}.
If \code{riesz} is not provided and \code{regr} is an \code{\link[=ei_riesz]{ei_riesz()}} object, then
\code{riesz} will be set to the value of \code{regr} and \code{regr} will be set to
\code{NULL}. This is so users can call this function as
\verb{ei_est(<riesz>, data = <data>)}.}

\item{riesz}{A fitted Riesz representer, from \code{\link[=ei_riesz]{ei_riesz()}}, or a matrix of
Riesz weights}

\item{data}{The data frame, matrix, or \link{ei_spec} object that was used to fit
the regression or Riesz representer.}

\item{total}{<\code{\link[tidyselect:language]{tidy-select}}> A variable
containing the total number of observations in each aggregate unit. For
example, the column containing the total number of voters. Required if
\code{data} is not an \code{\link[=ei_spec]{ei_spec()}} object and \code{riesz} is not provided.}

\item{subset}{<\code{\link[rlang:args_data_masking]{data-masking}}> An optional
indexing vector describing the subset of units over which to calculate
estimates.}

\item{contrast}{If provided, a list containing entries \code{predictor} and
\code{outcome}, each containing a contrast vector.  If only one of \code{predictor}
or \code{outcome} is provided, the contrast will be calculated for all levels of
the other variable.  For example \code{list(predictor = c(1, -1, 0))} will
calculate the difference in each outcome between the first and second
predictor groups; \code{list(outcome = c(1, -1))} will calculate the difference
between the two outcomes for each predictor group; and
\code{list(predictor = c(1, -1, 0), outcome = c(1, -1))} will calculate the
difference in differences.}

\item{outcome}{<\code{\link[rlang:args_data_masking]{data-masking}}> A vector or
matrix of outcome variables. Only required if both \code{riesz} is provided
alone (without \code{regr}) and \code{data} is not an \link{ei_spec} object.}

\item{conf_level}{A numeric specifying the level for confidence intervals.
If \code{FALSE} (the default), no confidence intervals are calculated. Standard
errors are always returned.}

\item{use_student}{If \code{TRUE}, use construct confidence intervals from a
Student-\emph{t} distribution, which may improve coverage properties in
small samples.}

\item{x, object}{An object of class \code{ei_est}}

\item{which}{Which column of \code{ei_est} to convert to a matrix. For example,
pass \code{which="std.error"} to return standard errors instead of estimates.
Partial matching supported.}

\item{...}{Additional arguments (ignored)}
}
\value{
A data frame with estimates. It has class \code{ei_est}, supporting
several methods, and two additional attributes: \code{vcov}, containing the
estimated covariance matrix for the estimates, and \code{n}, containing the
number of aggregate units used in estimation (the number of rows in
\code{data}).
}
\description{
Produces estimates of overall conditional means from a fitted
ecological inference model or Riesz representer.
If both a regression model and a Riesz representer are provided, a debiased
machine learning (DML) estimate is produced.
}
\section{Methods (by generic)}{
\itemize{
\item \code{as.matrix(ei_est)}: Format estimates, standard errors, or other columns as a matrix.

\item \code{vcov(ei_est)}: Extract full covariance matrix of estimates

\item \code{nobs(ei_est)}: Extract number of units covered by estimates

}}
\examples{
data(elec_1968)

spec = ei_spec(elec_1968, vap_white:vap_other, pres_dem_hum:pres_abs,
               total = pres_total, covariates = c(state, pop_urban, farm))

m = ei_ridge(spec)
rr = ei_riesz(spec, penalty = m$penalty)

ei_est(regr = m, data = spec, conf_level = 0.95) # Plug-in estimate
ei_est(riesz = rr, data = spec) # Weighted (Riesz) estimate
est = ei_est(regr = m, riesz = rr, data = spec) # Double/debiased ML estimate
# Working with the output
as.matrix(est)
as.matrix(est, "std.error")
vcov(est)[1:4, 1:4]

# Contrasts
ei_est(regr = m, riesz = rr, data = spec, contrast = list(predictor = c(1, -1, 0)))
ei_est(regr = m, riesz = rr, data = spec,
       contrast = list(predictor = c(-1, 1, 0), outcome = c(1, -1, 0, 0)))

# Subsetting
est = ei_est(m, rr, data = spec, subset = (state == "Alabama"))
as.matrix(est)
nobs(est)
}
